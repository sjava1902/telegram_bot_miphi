# -*- coding: utf-8 -*-
import telebot
from telebot import types
import nltk
from nltk.metrics.distance import edit_distance
import dateparser
import requests
import whisper
import subprocess
import os, sys
from pathlib import Path
import datetime

current_station = ""
current_time = datetime.datetime.now()
token='6463803088:AAH9iVZAv71ScKwERcscNCTyY5-4wkqZ1Ew'
bot=telebot.TeleBot(token)
stations = ['Б.Рокоссовского', 'Черкизовская', 'Преображенск. пл', 'Сокольники СЛ', 'Красносельская', 'Комсомольск. СЛ',
 'Красные ворота', 'Чистые пруды', 'Лубянка', 'Охотный ряд',
 'Кропоткинская', 'Парк культуры СЛ', 'Фрунзенская', 'Спортивная',
 'Воробьёвы горы', 'Университет', 'Пр-т Вернадск.СЛ', 'Юго-западная',
 'Красногвардейск.', 'Домодедовская', 'Орехово', 'Царицыно',
 'Кантемировская', 'Коломенская', 'Автозаводская', 'Павелецкая ЗЛ',
 'Новокузнецкая', 'Театральная(Зам)', 'Тверская', 'Маяковская',
 'Белорусская ЗЛ', 'Динамо', 'Аэропорт', 'Сокол',
 'Войковская', 'Водный Стадион', 'Речной вокзал', 'Каширская',
 'Каховская', 'Варшавская', 'Киевская АПЛ', 'Смоленская АПЛ',
 'Арбатская АПЛ', 'Пл. Революции', 'Курская АПЛ', 'Бауманская',
 'Электрозав-я АПЛ', 'Семёновская', 'Партизанская', 'Измайловская',
 'Первомайская', 'Щёлковская', 'Александр. сад', 'Арбатская ФЛ',
 'Смоленская ФЛ', 'Студенческая', 'Кутузовская ФЛ', 'Фили',
 'Багратионовская', 'Филёвский парк', 'Пионерская', 'Кунцевская ФЛ',
 'Молодёжная', 'Крылатское', 'Белорусская КЛ', 'Новослободская',
 'Проспект Мира КЛ', 'Комсомольская КЛ', 'Курская КЛ', 'Таганская КЛ',
 'Павелецкая КЛ', 'Добрынинская', 'Октябрьская КЛ', 'Парк культуры КЛ',
 'Киевская КЛ', 'Краснопресненск.', 'Новогиреево', 'Перово',
 'Ш. Энтузиастов', 'Авиамотор-я КалЛ', 'Площадь Ильича', 'Марксистская',
 'Третьяковск.КалЛ', 'Медведково', 'Бабушкинская', 'Свиблово',
 'Ботанический сад', 'ВДНХ', 'Алексеевская', 'Рижская',
 'Пр-кт Мира КРЛ', 'Сухаревская',  'Тургеневская', 'Китай-город КРЛ',
 'Третьяковск. КРЛ', 'Октябрьская КРЛ', 'Шаболовская', 'Ленинский пр-т',
 'Академическая', 'Профсоюзная', 'Новые Черёмушки', 'Калужская',
 'Беляево', 'Коньково', 'Тёплый стан', 'Ясенево',
 'Новоясеневская', 'Выхино', 'Рязанский пр-т', 'Кузьминки',
 'Текстильщики ТКЛ', 'Волгоградский пр', 'Пролетарская', 'Таганская ТКЛ',
 'Китай-город(Т-К)', 'Кузнецкий мост', 'Пушкинская', 'Баррикадная',
 'Улица 1905 года', 'Беговая', 'Полежаевская', 'Октябрьское поле',
 'Щукинская', 'Тушинская', 'Сходненская', 'Планерная',
 'Алтуфьево', 'Бибирево', 'Отрадное', 'Владыкино', 'Петр.-Разумовск.', 'Тимирязевская',
 'Дмитровская', 'Савёловская СТЛ', 'Менделеевская', 'Цветной Бульвар',
 'Чеховская', 'Боровицкая', 'Полянка', 'Серпуховская',
 'Тульская', 'Нагатинская', 'Нагорная', 'Нахимовский пр-т',
 'Севастопольская', 'Чертановская', 'Южная', 'Пражская',
 'Чкаловская', 'Римская', 'Крест. застава', 'Кожуховская',
 'Печатники ЛДЛ', 'Волжская', 'Люблино', 'Братиславская',
 'Марьино', 'Стенд', 'Библ. им. Ленина',
 'Дубровка', 'Ул. Ак. Янгеля', 'Аннино', 'Административная',
 'Б-р Дм. Донского', 'Парк Победы АПЛ', 'Старокачаловская', 'Ул. Скобелевская',
 'Б-р Адм. Ушакова', 'Ул. Горчакова', 'Бунинская аллея', 'Трубная',
 'Кунцевская АПЛ', 'Строгино', 'Каширская (Ках.)', 'Киевская (Фил.)',
 'Сретенский б-р', 'Славянский бульв', 'Мякинино', 'Волоколамская',
 'Митино', 'Достоевская', 'Марьина Роща ЛДЛ',
 'Борисово', 'Шипиловская', 'Зябликово', 'Новокосино',
 'Алма-Атинская', 'Пятницкое шоссе', 'Жулебино', 'Лермонтовский пр',
 'Котельники', 'Битцевский парк', 'Лесопарковая', 'Дел. центр СолЛ',
 'Парк Победы КС', 'Спартак', 'Тропарёво', 'Румянцево',
 'Саларьево', 'Технопарк', 'Шелепиха МЦК', 'Шоссе энтуз.МЦК',
 'Панфиловская МЦК', 'Стрешнево МЦК', 'Балтийская МЦК', 'Коптево МЦК',
 'Лихоборы МЦК', 'Владыкино МЦК', 'Окружная МЦК', 'Б-р Рокоссов.МЦК',
 'Локомотив МЦК', 'Измайлово МЦК', 'Сокол. гора МЦК', 'Андроновка МЦК',
 'Угрешская МЦК', 'Дубровка МЦК', 'Автозавод. МЦК', 'ЗИЛ МЦК',
 'Хорошёво МЦК', 'Ростокино МЦК', 'Ботан. сад МЦК', 'Белокаменная МЦК',
 'Новохохлов-я МЦК', 'Верхн. Котлы МЦК', 'Крымская МЦК', 'Нижегородск. МЦК',
 'Лужники МЦК', 'Кутузовская МЦК', 'Москва-Сити МЦК', 'Зорге МЦК',
 'Пл. Гагарина МЦК', 'Бутырская', 'Фонвизинская', 'Петровско-Разум.',
 'Минская', 'Ломоносов-ий п-т', 'Раменки', 'Ломоносовск.пр-т',
 'Парк Победы СолЛ', 'Воробьевы горы С', 'Комсомольская 2', 'Выхино 2',
 'Петровский парк', 'Дел. центр БКЛ', 'Ховрино', 'Шелепиха',
 'Хорошёвская', 'ЦСКА', 'Воробьёвы горы С', 'Селигерская',
 'Верхние Лихоборы', 'Окружная', 'Шелепиха(Солнц.)', 'Хорошев-я(Солнц)',
 'ЦСКА(Солнц.)', 'Петр.парк(Солнц)', 'Мичурин.пр-тСолЛ', 'Озёрная',
 'Говорово', 'Солнцево', 'Боровское шоссе', 'Новопеределкино',
 'Рассказовка', 'Беломорская', 'Савёловская БКЛ', 'Филатов луг',
 'Прокшино', 'Ольховая', 'Коммунарка', 'Косино',
 'Ул.Дмитриевского', 'Лухмановская', 'Некрасовка', 'Юго-Восточная',
 'Окская', 'Стахановская', 'Нижегородская', 'Авиамоторная БКЛ',
 'Лефортово', 'ТПУ Рязанская', 'Авиамоторная нек', 'Лефортово нек.',
 'Лефортово БКЛ', 'Электрозав-я БКЛ', 'Народное Ополч-е', 'Мнёвники',
 'Электрозав-я нек', 'Хорошёвская(Мн)', 'Зюзино', 'Воронцовская',
 'Новаторская', 'Пр-т Вернад. БКЛ', 'Мичурин.пр-т БКЛ', 'Аминьевская',
 'Давыдково', 'Кунцевская БКЛ', 'Терехово', 'Марьина Роща БКЛ',
 'Рижская БКЛ', 'Сокольники БКЛ', 'Текстильщики БКЛ', 'Печатники БКЛ',
 'Нагатинский З-н', 'Кленовый бульвар', 'Нижегород-я БКЛ', 'Каширская (Зам)',
 'Нижегород-я НБС', 'Пыхтино', 'Аэропорт Внуково', 'Яхромская',
 'Лианозово', 'Физтех', 'Текстильщики СЦ']
stations_preprocessed = [x.lower() for x in stations]

time_words = ['вчера', 'сегодня', 'завтра', 'послезавтра', 'позавчера', 'через', 'после', 'назад', 'следующ', 'прошл', 'недел', 'прошедш'
              'январ', 'феврал', 'март', 'апрел', 'май', 'июн', 'июл', 'август', 'сентябр', 'октябр', 'ноябр', 'декабр',
              '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'понедельник', 'вторник', 'сред', 'четверг', 'пятниц', 'суббот', 'воскресенье',
              'один', 'два', 'три', 'четыре', 'пять', 'шесть', 'семь', 'восемь', 'девять', '.', ':', ',', ';', '-', '/', '\\', '|',
              'десять', 'двадцать', 'тридцать', 'сорок', 'пятьдесят', 'шестьдесят', 'семьдесят', 'восемьдесят', 'девяносто', 'сто',
              
              'yesterday', 'today', 'tomorrow', 'the day after tomorrow', 'the day before yesterday', 'through', 'field', 'back', 'next', 'passed', 'weeks', 'past'
              'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December',
              '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ' Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday',
              'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', '.', ':', ',', ';', '-', '/', '\\', '|',
              'ten', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety', 'hundred']

def preprocess(text):
    text = text.lower()
    text = text.replace('?', '')
    return text

def get_time_substr(sentence):
    words = sentence.split(' ')
    res = []
    for word in words:
        for time_word in time_words:
            if time_word in word:
                res.append(word)
                break
    res_str = ""
    for elem in res:
        res_str += elem + ' '
    return res_str
    

def get_word_by_min_distance(sentence):
    close_word = ""
    min_distance = 100
    for station in stations_preprocessed:
        distance = edit_distance(sentence, station)
        if(distance < min_distance):
            min_distance = distance
            close_word = station
    for station in stations:
        station_preprocessed = station.lower()
        if(close_word == station_preprocessed):
            close_word = station
    if min_distance >= 3:
        return close_word
    else:
        return ""
    

# Handle '/start' and '/help'
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, "Введите какую информацию о пассажиропотоке в какой день и на какой станции Вы хотите узнать!")
    
@bot.message_handler(commands=['help'])
def help(messsage):
    bot.reply_to(messsage, "Доступные команды: /start, /help")
    
@bot.message_handler(content_types=['photo'])
def photo(message):
    bot.send_message(message.chat.id, "Фото не поддерживается.")

@bot.message_handler(content_types=['voice'])
def audio(message):
    file_info = bot.get_file(message.voice.file_id)
    path = file_info.file_path # Вот тут-то и полный путь до файла (например: voice/file_2.oga)
    fname = os.path.basename(path) # Преобразуем путь в имя файла (например: file_2.oga)
    print(fname)
    doc = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(token, file_info.file_path)) # Получаем и сохраняем присланную голосвуху (Ага, админ может в любой момент отключить удаление айдио файлов и слушать все, что ты там говоришь. А представь, что такую бяку подселят в огромный чат и она будет просто логировать все сообщения [анонимность в телеграмме, ахахаха])
    with open(fname, 'wb') as f:
        f.write(doc.content) # вот именно тут и сохраняется сама аудио-мессага
    process = subprocess.run(['ffmpeg', '-i', fname, fname+'.wav'])# здесь используется страшное ПО ffmpeg, для конвертации .oga в .vaw
    model = whisper.load_model("base")
    result = model.transcribe(fname+'.wav')
    bot.send_message(message.from_user.id, format(result['text'])) # Отправляем пользователю, приславшему файл, его текст
    os.remove(fname)
    os.remove(fname+".wav")


# Handle all other messages with content_type 'text' (content_types defaults to ['text'])
@bot.message_handler(func=lambda message: True)
def echo_message(message):
    text = message.text
    text = preprocess(text)
    time_substr = get_time_substr(text)
    time = dateparser.parse(time_substr)
    stationIsCorrect = False
    
    for station in stations_preprocessed:
        if station in text:
            stationIsCorrect = True
            bot.reply_to(message, station)
            current_station = station
            break 
    if not stationIsCorrect:
        station = get_word_by_min_distance(text)
        if station:
            bot.reply_to(message, station)
            current_station = station
        else:
            bot.reply_to(message, "Введите корректную станцию")

    if(time):
        bot.reply_to(message, time)
        current_time = time
    else:
        bot.reply_to(message, "Введите корректное время")
 
# @bot.message_handler(commands=['button'])
# def button_message(message):
# 	markup=types.ReplyKeyboardMarkup(resize_keyboard=True)
# 	item1=types.KeyboardButton("Кнопка")
#     markup.add(item1)
#     bot.send_message(message.chat.id,'Выберите что вам надо',reply_markup=markup)

bot.infinity_polling()